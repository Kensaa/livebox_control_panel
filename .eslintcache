[{"G:\\devs\\JS\\React\\livebox_control_panel\\src\\index.js":"1","G:\\devs\\JS\\React\\livebox_control_panel\\src\\App.js":"2","G:\\devs\\JS\\React\\livebox_control_panel\\src\\app.js":"3","G:\\devs\\JS\\React\\livebox_control_panel\\src\\loginTab.js":"4","G:\\devs\\JS\\React\\livebox_control_panel\\src\\dashboard.js":"5","G:\\devs\\JS\\React\\livebox_control_panel\\src\\lib\\livebox.js":"6"},{"size":135,"mtime":1610824251264,"results":"7","hashOfConfig":"8"},{"size":192,"mtime":1610573926447,"results":"9","hashOfConfig":"8"},{"size":461,"mtime":1610830775173,"results":"10","hashOfConfig":"8"},{"size":2276,"mtime":1610837125809,"results":"11","hashOfConfig":"8"},{"size":495,"mtime":1610837653744,"results":"12","hashOfConfig":"8"},{"size":6332,"mtime":1610831657089,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1pv5kb6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"G:\\devs\\JS\\React\\livebox_control_panel\\src\\index.js",[],["28","29"],"G:\\devs\\JS\\React\\livebox_control_panel\\src\\App.js",[],"G:\\devs\\JS\\React\\livebox_control_panel\\src\\app.js",[],"G:\\devs\\JS\\React\\livebox_control_panel\\src\\loginTab.js",[],"G:\\devs\\JS\\React\\livebox_control_panel\\src\\dashboard.js",[],"G:\\devs\\JS\\React\\livebox_control_panel\\src\\lib\\livebox.js",["30","31","32"],"const http = window.require(\"http\");\r\n\r\nasync function request(req,reqOptions){\r\n  return new Promise((resolve,reject)=>{\r\n    http.request(reqOptions,res =>{\r\n      let data = \"\"\r\n      res.on(\"data\", d => {\r\n          data += d\r\n      })\r\n      res.on(\"end\", () => {\r\n          let r = {\r\n            headers: res.headers,\r\n            data: data\r\n          }\r\n          resolve(r);\r\n      })\r\n    }).on(\"error\",(e)=>{\r\n      console.error(e);\r\n      reject(e);\r\n    }).end(JSON.stringify(req));\r\n  });\r\n}\r\n\r\nasync function login(address,user,pass){\r\n    let req = {\r\n        \"service\": \"sah.Device.Information\",\r\n        \"method\": \"createContext\",\r\n        \"parameters\": {\r\n          \"applicationName\": \"webui\",\r\n          \"username\": user,\r\n          \"password\": pass\r\n        }\r\n    }\r\n    let reqOptions = {\r\n        hostname: address,\r\n        path: \"/ws\",\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": \"X-Sah-Login\"\r\n        }\r\n      }\r\n    return new Promise((resolve,reject)=>{\r\n        request(req,reqOptions).then((data) =>{\r\n        let json = JSON.parse(data.data);\r\n        let token = json.data.contextID\r\n        let cookie = Object.values(data.headers)[0][0].split(';')[0];\r\n        let ret = {\r\n          token:token,\r\n          cookie:cookie\r\n        }\r\n        resolve(ret);\r\n      })\r\n      \r\n      });\r\n}\r\n\r\nasync function getSchedulerRaw(options){\r\n    let address = options.host;\r\n    let token = options.token;\r\n    let cookie = options.cookie;\r\n    let mac = options.info.mac;\r\n\r\n\r\n    let req = {\r\n        \"service\": \"Scheduler\",\r\n        \"method\": \"getSchedule\",\r\n        \"parameters\": {\r\n          \"type\": \"ToD\",\r\n          \"ID\": `${mac}`\r\n        }\r\n      }\r\n    let reqOptions = {\r\n        hostname: address,\r\n        path: \"/ws\",\r\n        method: \"POST\",\r\n        headers: {\r\n          \"authorization\": `X-Sah ${token}`,\r\n          \"content-type\": \"application/x-sah-ws-4-call+json\",\r\n          \"cookie\":cookie\r\n        }\r\n      }\r\n    return new Promise((resolve,reject)=>{\r\n      request(req,reqOptions).then((data)=>{\r\n        let json = JSON.parse(data.data);\r\n        resolve(json);\r\n      });\r\n    });\r\n}\r\n\r\nasync function getScheduleInfo(options){\r\n  return new Promise((resolve,reject)=> {\r\n    getSchedulerRaw(options).then((res)=>{\r\n      if(res.status = false){\r\n        resolve(null);\r\n      }else{\r\n        resolve(res.data.scheduleInfo);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function createScheduler(options){\r\n  let address = options.host;\r\n  let token = options.token;\r\n  let cookie = options.cookie;\r\n  let mac = options.info.mac;\r\n  let state = options.info.state;\r\n\r\n  let req = {\r\n    \"service\": \"Scheduler\",\r\n    \"method\": \"addSchedule\",\r\n    \"parameters\": {\r\n      \"type\": \"ToD\",\r\n      \"info\": {\r\n        \"base\": \"Weekly\",\r\n        \"def\": \"Enable\",\r\n        \"ID\": mac,\r\n        \"schedule\": [],\r\n        \"enable\": true,\r\n        \"override\": state\r\n      }\r\n    }\r\n  }\r\n  let reqOptions = {\r\n      hostname: address,\r\n      path: \"/ws\",\r\n      method: \"POST\",\r\n      headers: {\r\n        \"authorization\": `X-Sah ${token}`,\r\n        \"content-type\": \"application/x-sah-ws-4-call+json\",\r\n        \"cookie\":cookie\r\n      }\r\n    }\r\n  return new Promise((resolve,reject)=>{\r\n    request(req,reqOptions).then((data) =>{\r\n      let json = JSON.parse(data.data);\r\n      resolve(json);\r\n    });\r\n    \r\n  });\r\n}\r\n\r\nasync function overrideScheduler(options){\r\n  let address = options.host;\r\n  let token = options.token;\r\n  let cookie = options.cookie;\r\n  let mac = options.info.mac;\r\n  let state = options.info.state;\r\n\r\n  let req = {\r\n    \"service\": \"Scheduler\",\r\n    \"method\": \"overrideSchedule\",\r\n    \"parameters\": {\r\n      \"type\": \"ToD\",\r\n      \"ID\": mac,\r\n      \"override\": state\r\n    }\r\n  }\r\n  let reqOptions = {\r\n      hostname: address,\r\n      path: \"/ws\",\r\n      method: \"POST\",\r\n      headers: {\r\n        \"authorization\": `X-Sah ${token}`,\r\n        \"content-type\": \"application/x-sah-ws-4-call+json\",\r\n        \"cookie\":cookie\r\n      }\r\n    }\r\n    return new Promise((resolve,reject)=>{\r\n      request(req,reqOptions).then((data) =>{\r\n        let json = JSON.parse(data.data);\r\n        resolve(json);\r\n      });\r\n      \r\n    });\r\n}\r\n\r\nasync function changeSchedulerState(options){\r\n  let state = options.info.state \r\n  let schInfo = await getScheduleInfo(options)\r\n  if(!schInfo){\r\n    await createScheduler(options)\r\n  }else if(schInfo.override.replace(' ','') != state){\r\n    await overrideScheduler(options);\r\n  }\r\n}\r\n\r\nasync function toggleScheduler(options){\r\n  let scheduler = await getScheduleInfo(options);\r\n  let currentState = scheduler.override.replace(' ','');\r\n  let newState = (currentState == 'Enable' ? 'Disable' : 'Enable');\r\n  let overrideOptions = {\r\n      host:'192.168.1.1',\r\n      token:options.token,\r\n      cookie:options.cookie,\r\n      info:{\r\n          mac:options.info.mac,\r\n          state:newState\r\n      }\r\n  }\r\n  await changeSchedulerState(overrideOptions);\r\n}\r\n\r\nasync function getWanStatus(options){\r\n  let req = {\r\n    \"service\": \"NMC\",\r\n    \"method\": \"getWANStatus\",\r\n    \"parameters\": {}\r\n  }\r\n  let reqOptions = {\r\n    hostname: options.host,\r\n    path: \"/ws\",\r\n    method: \"POST\",\r\n    headers: {\r\n      \"authorization\": `X-Sah ${options.token}`,\r\n      \"content-type\": \"application/x-sah-ws-4-call+json\",\r\n      \"cookie\":options.cookie\r\n    }\r\n  }\r\n\r\n  return new Promise((resolve,reject)=>{\r\n    request(req,reqOptions).then((data) =>{\r\n      let json = JSON.parse(data.data);\r\n      resolve(json);\r\n    });\r\n  });\r\n\r\n}\r\n\r\nasync function getWanSpeed(options){\r\n  let req = {\r\n    \"service\": \"NeMo.Intf.data\",\r\n    \"method\": \"getMIBs\",\r\n    \"parameters\": {\r\n      \"mibs\": \"dsl\"\r\n    }\r\n  }\r\n  let reqOptions = {\r\n    hostname: options.host,\r\n    path: \"/ws\",\r\n    method: \"POST\",\r\n    headers: {\r\n      \"authorization\": `X-Sah ${options.token}`,\r\n      \"content-type\": \"application/x-sah-ws-4-call+json\",\r\n      \"cookie\":options.cookie\r\n    }\r\n  }\r\n\r\n  return new Promise((resolve,reject)=>{\r\n    request(req,reqOptions).then((data) =>{\r\n      let json = JSON.parse(data.data);\r\n      resolve(json);\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports = {login, getSchedulerRaw, getScheduleInfo, toggleScheduler, changeSchedulerState, overrideScheduler, getWanStatus, getWanSpeed};\r\n\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":94,"column":10,"nodeType":"39","messageId":"40","endLine":94,"endColumn":28},{"ruleId":"41","severity":1,"message":"42","line":184,"column":45,"nodeType":"43","messageId":"44","endLine":184,"endColumn":47},{"ruleId":"41","severity":1,"message":"45","line":192,"column":32,"nodeType":"43","messageId":"44","endLine":192,"endColumn":34},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]